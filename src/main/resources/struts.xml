<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">

<struts>
	<!-- 不让struts2支持动态方法调用,不使用叹号访问方法 -->
	<constant name="struts.enable.DynamicMethodInvocation" value="false" />
	<!-- 配置为开发模式(开发设置为true,发布到生产环境后设置为false) -->
	<constant name="struts.devMode" value="true" />
	<!-- 把主题配置为simple，默认值为struts.ui.theme = xhtml -->
	<constant name="struts.ui.theme" value="simple" />
	<!-- 所有匹配*.action的请求都由struts2处理 -->
	<constant name="struts.action.extension" value="action" />
	<!-- 指定由spring负责action对象的创建 -->
	<!-- <constant name="struts.objectFactory" value="spring" /> -->

	<package name="default" namespace="/" extends="json-default">
 		
		<interceptors>
				<!-- 自定义一个权限拦截器 -->
				<interceptor name="authInterceptor" class="com.hd.pss.interceptor.AuthInterceptor" />
				<!-- 自定义一个拦截器栈 -->
				<interceptor-stack name="pssStack">
					<!-- 放到最前面:引用自定义一个权限拦截器 -->
					<interceptor-ref name="authInterceptor" />
					<!-- 基于paramsPrepareParamsStack 增加store ,interceptor保证actionMessage在redirect后不会丢失 -->
					<interceptor-ref name="store">
						<param name="operationMode">AUTOMATIC</param>
					</interceptor-ref>
					<!-- 添加默认的拦截器栈defaultStack为paramsPrepareParamsStack  -->
					<interceptor-ref name="paramsPrepareParamsStack" />
				</interceptor-stack>
		</interceptors>
		
		<!-- 修改默认的拦截器栈 -->
		<default-interceptor-ref name="pssStack" />

		<!-- 全局结果 -->
		<global-results>
				<result name="login">/WEB-INF/pages/login.jsp</result>
				<result name="auth">/WEB-INF/pages/auth.jsp</result>
				<result name="main" type="redirectAction">main</result>
		</global-results>
		
		<!-- 没有配置class类,是由<default-class-ref class="com.opensymphony.xwork2.ActionSupport" /> -->
		<!-- 后台页面 -->
		<action name="main">
			<result>/WEB-INF/pages/main.jsp</result>
		</action>
		<!-- 后台右边 -->
		<action name="right">
			<result>/WEB-INF/pages/right.jsp</result>
		</action>
		<!-- 演示velocity和Struts2集成
			 1.不为spring管理的就使用全类名 : com.hd.pss.view.action.VelocityAction
			 2.type 输出的类型为velocity方式
		 -->
		<action name="velocity" class="com.hd.pss.view.action.VelocityAction">
			<result type="velocity">/WEB-INF/pages/hello.html</result>
		</action>
		
		<!--登陆 -->
		<action name="login_*" class="loginAction" method="{1}"/>
		
		<!--左侧菜单  -->
		<action name="left" class="leftAction" >
			<result name="json" type="json">
				<!-- 使用json的返回类型<result-type name="json" class="org.apache.struts2.json.JSONResult"/> -->
				<!-- 默认是直接输出当前Action的属性 -->
				<!-- 通过root参数的配置,告诉JSONResult对象输出对应的对象  访问map需要加#-->
				<param name="root">#menus</param>
				<!-- 配置空的属性不输出 -->
				<param name="excludeNullProperties">true</param>
			</result>
		</action>
		
		<!--修改密码  -->
		<action name="updatePassword_*" class="updatePasswordAction" method="{1}">
			<!-- name默认为success  -->	
			<result>/WEB-INF/pages/updatePassword.jsp</result>
		</action>
		
		
		
		 <!--class对应Spring中bean的id -->
		 <action name="employee_*" class="employeeAction" method="{1}">
		 		<!--name默认为success  -->	
		 		<result >/WEB-INF/pages/employee/employee.jsp</result>
		 		<!-- 如果出现转换异常，把字符串放到了Interger属性里面，默认会跳转到input指向的jsp页面 -->
		 		<result name="input">/WEB-INF/pages/employee/employee-input.jsp</result>
		 		<result name="reload" type="redirectAction">
		 				<!--传递请求的url  -->
		 				<param name="actionName"> employee </param>
		 				<!--get方式提交: 额外的参数：取EmployeeAction里面getBaseQuery().getCurrentPage() -->
		 				<param name="baseQuery.currentPage">${baseQuery.currentPage}</param>
		 				<param name="baseQuery.pageSize">${baseQuery.pageSize}</param>
		 				<param name="baseQuery.name">${baseQuery.name}</param>
		 				<param name="baseQuery.email">${baseQuery.email}</param>
		 			  	<param name="baseQuery.deptId">${baseQuery.deptId}</param>
		 		</result>
		 		<!-- 配置json格式的输出 -->
		 		<result name="json" type="json">
					<param name="root">#map</param>
					<!-- 配置空的属性不输出 -->
					<param name="excludeNullProperties">map</param>
			   </result>
			   <!-- 文件下载：导出xsl -->
			   <result name="download" type="stream">
				    <!-- 下载文件的类型图片image/gif  -->
				 	<!-- tomcat/conf/web.xml -->
					<param name="contentType">application/vnd.ms-excel</param>
					<param name="inputName">inputStream</param>
					<!-- <param name="contentDisposition">filename="employee.xls"</param> -->
					<param name="contentDisposition">filename=${fileName}</param>
					<param name="bufferSize">4096</param>
			   </result>
		 </action>
		 
		 <!-- 处理其他所有的crud的action -->
		<action name="*_*" class="{1}Action" method="{2}">
			<result>/WEB-INF/pages/{1}/{1}.jsp</result>
			<!-- 如果出现转换异常:把字符串放到了Integer属性里面 ,默认会跳转到input指向的jsp页面 -->
			<result name="input">/WEB-INF/pages/{1}/{1}-input.jsp</result>
			<result name="reload" type="redirectAction">
				<!-- 传递请求的url -->
				<param name="actionName">{1}</param>
				<!-- get方式:传递额外的参数:取xxxAction里面getBaseQuery().getCurrentPage() -->
				<param name="baseQuery.currentPage">${baseQuery.currentPage}</param>
				<param name="baseQuery.pageSize">${baseQuery.pageSize}</param>
			</result>
			<!-- 配置json格式的输出 -->
			<result name="json" type="json">
					<param name="root">#map</param>
					<!-- 配置空的属性不输出 -->
					<param name="excludeNullProperties">map</param>
			</result>
		</action>
		 
	</package>



	<!--Add packages here -->


</struts>
