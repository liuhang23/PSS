一.权限模型和控制权限
	1.1 早期做法 ： 员工表； 字段status  1管理员、0员工
		Oracle :  权限表，角色表，用户表
				  Employee ----- Role  ---- Resource
				  
	1.2权限控制什么东西？
		Url:servelt,struts1都是通过过滤器控制url,spring-security
		Action.方法:struts2是通过拦截器控制Action里面的方法
		页面的按钮：是否显示，是否禁用,自定义标签库
		Domain：华东地区经理，西南地区经理,只能查看对应区域的domain数据,代码直接判断
				  
	1.3权限模型  
	employee                                  role						resource
	id   name        password				  id     name				id     name      method
	1    admin       admin					  1      超级管理员		    1      资源管理  cd.itcast.pss.web.ResourceAction.ALL
	2    roleAdmin   roleAdmin				  2      角色管理员			2      角色管理  cd.itcast.pss.web.RoleAction.ALL
	...																    3      删除员工  cd.itcast.pss.web.EmployeeAction.delete
	
							中间表employee_role				中间表role_resource
							employee_id   role_id			role_id   resource_id
							1             1					 1         1
							1             2					 1         2
							2             2					 1         3
															 2		   2
															 
															 
    1.4一个用户可以同时拥有多个角色  【设计更加通用】
		部门经理:部门经理比副经理多一个审核权限,出差,审核权限没人管理,临时授权给副经理多一个审核权限
		部门副经理:此时就拥有2个角色
			
	1.5实现方式 ：Action.方法:struts2是通过拦截器控制Action里面的方法,交给用户使用的时候,把所有的资源全部一次性初始化完成
	

二.编写测试代码
   1.写出domain对象的属性和映射关联
   2.在xxx.hbm.xml中配置信息
   3.通过工具生成代码
   4.编写测试数据 : 编写原则：某个对象A关联某个对象B，A中包含B，先写被关联的对象B。	
   5.编写玩测试后进行导入数据 ： 使用junit中的suite生成的类AllTest.java可以简化操作，运行此类就可以完成数据导入。
   			注意点 ： 放前面(单表)的先运行，依赖的测试应该放后面
   					@RunWith(Suite.class)
					@SuiteClasses({ ResourceServiceTest.class,RoleServiceTest.class,DepartmentServiceTest.class, EmployeeServiceTest.class })		
		
			
三.角色(Role)页面管理和员工(Employee)角色管理（类似）
   	   1.RoleAction:注入IResourceService
		public void setResourceService(IResourceService resourceService) {
				this.resourceService = resourceService;
		}
	
		2.RoleManager.xml
		<bean id="roleAction" class="cd.itcast.pss.web.RoleAction"
				scope="prototype">
				<property name="roleService" ref="roleService" />
				<property name="resourceService" ref="resourceService" />		
		</bean>
		
		3.RoleAction.input
				// 添加一个资源的选择列表  :命名不能为resources,因为role对象已经存在一个属性resources
				putContext("allResources", resourceService.getAll());
		
		4.RoleAction.save
				private Long[] ids;get,set方法
				// 添加中间表的数据
				for (Long id : ids) {
					role.getResources().add(new Resource(id));
				}

		5.before方法
			// 这里是Preparable拦截器起了作用，会先执行下面的方法（prepareSave(),prepareInput()）
			@Override
			protected void beforeInput() throws Exception {
				logger.debug("beforeInput");
				if (id != null) {
					employee = employeeService.get(id); // 回显员工信息
					// 把employee.getRoles()变成ids回显
					ids = new Long[employee.getRoles().size()]; // 实例化ids的数组
					int index = 0;
					for (Role role : employee.getRoles()) {
						ids[index++] = role.getId();
					}
				}
		
			}
		
			@Override
			protected void beforeSave() throws Exception {
				logger.debug("beforeSave");
				if (id == null) {
					employee = new Employee(); // 实例化，防止为空,表示新建对象
				} else {
					// employee为持久化状态,持久化状态无法更改
					employee = employeeService.get(id); // 把数据从数据库加载出来，没有在jsp页面出现的属性不会丢失
					// employee.getDepartment();持久化状态
					// 改变状态：把持久状态变成瞬时状态
					employee.setDepartment(null);
					//清除员工的角色
					//employee.setRoles(null);    //java.lang.NullPointerException
					//employee.getRoles(new HashSet<Role>());   //浪费资源，重新new一个新的对象
					employee.getRoles().clear();	//清空集合中的值
				}
			}
			
		6.role-input.jsp
		 <s:checkboxlist list="#allResources" name="ids" listKey="id" listValue="name"/>
   
        											
四.在employee.jso页面显示角色信息增强
  	1. <td width="14%">角色</td>
  	   <td>${roles}</td>
  	  注： 需要将width去掉，让页面自使用，否则会很难看 
  	2.重写Role中toString方法，只显示姓名（否则会是显示内存地址）  
    




    												
	
	
		 