类功能介绍 : 公共类 : BaseQuery (封装公共当前页码、一页条数、封装2条hql以及参数，子类不需要写)  接收查询条件
				   PageResult(封装需要返回的所有值)   返回所有查询结果
		   子类   : 编写自己拥有的属性 ,将条件写为get/Set

一.类的封装(BaseQuery,子类 EmployeeQuery,)
	1.1.编写公共类BaseQuery(封装一页页数和页码以及2个hql语句【查询总数和每页数据】)  设置为abstract
		xxxQuery子类包含各自的查询的条件,并extends BaseQuery
	1.2.PageResult<T>类，包含查询的结果对象
	1.3.具体的实现类在baseDao
	1.4.按条件模糊查询
		//hql : select o from Employee o where o.name like ? and o.email like ? and o.department.id = ?
		//countHql : select count(o) from Employee o where o.name like ? and  o.emai like ? and o.department.id = ?
 
    如何获取2个hql语句 公共类--> BaseQuery  hql : select o from Employee o 	  
   								  countHql : select count(o) from Employee o 
   						       公共的查询条件 : 当前页码，一页显示的条数
   					        abstract addWhere();   		addWhere(String where , Object..objects)					 	 
   子类 EmployeeQuery  :  		   addWhere() 处理自己条件
   								   addWhere(String where , Object..objects)添加条件到父类的成员变量		
       DepartmentQuery 	
       
       
 二.编写测试
 	1.org.apache.commons.lang.StringUtils
 	    StringUtils类     isNotEmpty将空格也作为参数,isNotBlank则排除空格参数
 		public static boolean isNotBlank(String str) 判断某字符串是否不为空且长度不为0且不由空白符(whitespace)构成,等于!isBlank(String str)
 	2. boolean    类型默认值为false   
 	  !boolean    表示取反（初始为ture,则为false,初始为false,则为ture）
 	   	int 默认值为 0   ， Integer 默认值为null(为int的包装类)
    3.测试类编写代码EmployeeService
    	//测试条件分页的查询
		@Test
		public void query() throws Exception{
			EmployeeQuery baseQuery = new EmployeeQuery();
			baseQuery.setCurrentPage(10);
			baseQuery.setPageSize(5);
			baseQuery.setName("hd");
			baseQuery.setEmail("a");
			PageResult<Employee> pageResult = employeeService.findPageResult(baseQuery);
			System.out.println(pageResult);
		}
	4.eclipse快捷键:  ctrl+shift+x   【转为大写】    
				     ctrl+shift+y   【转为小写】
				     
	5.BaseQuery.java  查询对象，封装公共的内容  : 一个条数，页码，封装2条hql以及参数值
			private StringBuilder hql;  //没有同步需求使用StringBuilder 
			//hql : select o from Employee o where o.name like ? and o.email like ? and o.department.id = ?
			private StringBuilder countHql;  //求总数
			//countHql : select count(o) from Employee o where o.name like ? and  o.emai like ? and o.department.id = ?
			
			//添加参数值
			private List paramList = new ArrayList();
			//封装公共: 当前页码、一页条数
			private int currentPage = 1;
			private int pageSize = 10;
			
			public BaseQuery(String className){
				hql = new StringBuilder("SELECT o FROM " + className + " o" ); // select o from Employee o
				countHql =  new StringBuilder("SELECT count(o) FROM " + className + " o");
			}
			
			//添加一个让子类处理查询提交的方法  abstract抽象的方法 子类必须去实现
			protected abstract void addWhere();
			
			//添加一个方法：直接让子类传入查询的条件和参数值[定义为可变数组]
			protected void addWhere(String where , Object... objects) {
				//使用where还是adn
				if(paramList.size() == 0){ //表示从没有放入过
					hql.append(" WHERE ").append(where); //空格
					countHql.append(" WHERE ").append(where);
				}else{
					hql.append(" AND ").append(where);
					countHql.append(" AND ").append(where);
				}
				//设置参数：1.addAll方法(返回集合) ， 2.把object数组变成list
				paramList.addAll(Arrays.asList(objects));
			}
			
			private boolean flag; //默认为false
			
			//保证addWhere只能调用一次
			private void builerWhere(){
				if(!flag){  // !flag  不为
					addWhere();
					flag = true;
				}
			}
			
			//因为BaseDao必须获取到hql,countHql,paramList,所有需要提供给get方法。
			
			//封装公共当前页码，一页条数：都必须有get,set
	
 三.PageResult的实现  PageResult<T>    //封装查询的所有结果
	// 封装公共: 当前页码、一页条数
	private int currentPage;
	private int pageSize;
	// 总记录数
	private int totalCount;
	// 总的页数（计算）
	private int totalPage;
	// 当前页码的数据
	private List<T> rows = new ArrayList<T>(); // 直接初始化，在toString方法中调用rows.size()就不会出现null指针

	public PageResult() {  }

	// 构造函数（当前页码，每页容量，总记录数）
	public PageResult(int currentPage, int pageSize, int totalCount) {
		// 1.做错误处理  以下的代码必须加上this
		this.currentPage = currentPage < 1 ? 1 : currentPage;
		this.pageSize = pageSize < 1 ? 10 : pageSize;
		this.totalCount = totalCount;
		// 2.计算总页数  
//		if(totalCount%pageSize == 0){
//			this.currentPage = this.totalCount/this.pageSize;
//		}else{
//			this.currentPage = this.totalCount/this.pageSize + 1;
//		}
		//110  10  11    110 + 10 -1 = 119/10 = 11(除不尽，余数去掉)
		//101  10  11    101 + 10 -1 = 110/10 = 11
		this.totalPage = (this.totalCount + this.pageSize -1) / this.pageSize;  // 分页页数
		// 3.当前页码大于总的页数必须在最后面处理(大于页数就显示最后一页数据)
		this.currentPage = this.currentPage >= this.totalPage ? this.totalPage : this.currentPage;
	}

	// get/set

	@Override
	public String toString() {
		return "PageResult [currentPage=" + currentPage + ", pageSize="
				+ pageSize + ", totalCount=" + totalCount + ", totalPage="
				+ totalPage + ", rows.size()=" + rows.size() + "]";
	} 	
 
 
 四.BaseDAO的查询实现      					  	
    1. Query query = session.createQuery("FROM student");
 	方法：uniqueResult() : 当确定返回的实例只有一个或者null时 用uniqueResult()方法
 		 list : 查询返回多个值
 		 List list = query.list()返回多个结果接
 		 
 		 setParameter(0,args);  //设置参数
 	2.BaseDAO.java
 	/**
	 * 按条件分页查询
	 */
	public PageResult<T> findPageResult(final BaseQuery baseQuery) {
		System.out.println("findPageResult countHql:" + baseQuery.getCountHql());
		System.out.println("findPageResult hql:" + baseQuery.getHql());
		System.out.println("findPageResult paramList:" + baseQuery.getParamList());
		//计算总数
		int count = getHibernateTemplate().executeWithNativeSession( //获取本地session
				new HibernateCallback<Integer>() {  //new出的是一个接口，需要再内部进行实现（匿名内部类）
					public Integer doInHibernate(Session session) throws HibernateException,SQLException { //回调获取
						//发出hql
						Query query = session.createQuery(baseQuery.getCountHql()); //内部类要访问外部属性,只能把变量定义为常量
						int index = 0;  //设置参数位子
						for(Object object : baseQuery.getParamList()){
							query.setParameter(index++, object); //用完后在加，不能写成index+1
							//index++
						}
						Long countLong = (Long)query.uniqueResult(); //获取唯一值	
						return countLong.intValue();
					}
		});
		//没有查询到数据
		if(count == 0){
			return new PageResult<T>();
		}
		
		//定义为final只是表示对象引用地址不能改变，但是地址对应值是可以改变的
		final  PageResult<T> pageResult = new PageResult<T>(baseQuery.getCurrentPage(),baseQuery.getPageSize(),count);
		
		//当前页数据
		List<T> rows = getHibernateTemplate().executeWithNativeSession(
				new HibernateCallback<List<T>>() {
					public List<T> doInHibernate(Session session) throws HibernateException, SQLException {
						//发送hql
						Query query = session.createQuery(baseQuery.getHql());
						//设置参数
						int index = 0;
						for(Object object : baseQuery.getParamList()){
							query.setParameter(index++, object);
						}
						//设置分页条件
						//baseQuery对象里面的CurrentPage,PageSize没有经过错误处理，必须使用pageResult对象。
						int first = (pageResult.getCurrentPage() -1) * pageResult.getPageSize();
						int max = pageResult.getPageSize();
						query.setFirstResult(first).setMaxResults(max);
						return query.list();
					}
				});
		pageResult.setRows(rows);
		return pageResult;
	}
 	
 	
 	
五.Action编写
	1.<!--表单提交--> 
	  <s:form action="xx">
			<!-- *此处为保存   image标签 类似于submit  ajax不能使用这个标签-->
			<input type="image" src="images/can_b_01.gif" />  <!-- 表单提交： image标签 --> 
 	   </s:form>
 	  会出现问题： 表单样式变乱 ， 需要将主题设置为theme="simple" , 可以在struts.xml配置主题为simple样式
 	
 	 <s:textfield name="baseQuery.currentPage" value="%{pageResult.currentPage}"  size="2"/> 
 		分析： name用于传递数据 ，  value用于回显数据(在sturst2中不能使用el($)时就使用ognl(%))
 	 	      这里baseQuery没有经过错误验证，应该使用pageResult
 	2.样式 overflow:auto; 设置自动检测
 	 <s:select list="{5,10,20}" name="baseQuery.pageSize"  onchange="document.forms[0].submit();" />
 	
 	
 	3.代码（所有页面共用分页）
 		<table width="100%" border="0" cellpadding="0" cellspacing="0">
				<tr>
					<td >&nbsp;</td>
					<td>共${pageResult.totalCount}条记录</td>
					<td>当前第<span style="color: red;">${pageResult.currentPage}</span>/${pageResult.totalPage }</td>
					<td>每页${pageResult.pageSize}条记录</td>
					<td>	
						<s:if test="pageResult.currentPage == 1">
								<td>首页</td>
								<td>上一页</td>
						</s:if>
						<s:else>
								<td><a href="#" onclick="go(1)">首页</a></td>
								<td><a href="#" onclick="go(${pageResult.currentPage-1})">上一页</a></td>
						</s:else>
						<s:if test="pageResult.currentPage == pageResult.totalPage">
								<td>下一页</td>
								<td>末页</td>
						</s:if>
						<s:else>
							<td><a href="#" onclick="go(${pageResult.currentPage + 1})">下一页</a></td>
							<td><a href="#" onclick="go(${pageResult.totalPage})">末页</a></td>
						</s:else>
					</td>
					<td>
						<s:textfield name="baseQuery.currentPage" value="%{pageResult.currentPage}" size="2"/>
						<s:submit  value="go" /> 
						<s:select list="{5,10,20}" name="baseQuery.pageSize"  onchange="document.forms[0].submit();" />
					</td>
				</tr>
			</table>
 			<!--分页点击事件  -->
			<script type="text/javascript">
					  function go(no){
						  document.getElementById("pageNo").value = no;	
						  document.forms[0].submit();
					  }
			</script>
 	
 	
 